let rec inclusion s1 s2 = 
	if (String.length s2 ) == 0 then false
	else if (String.length s2) < (String.length s1) then false
	else if (String.compare s1 (String.sub s2 0 (String.length s1))) == 0 then true
	else (inclusion s1 (String.sub s2 1 ((String.length s2) - 1)));;

let rec position s1 s2 = 
	if (String.length s2 ) == 0 then 0
	else if (String.length s2) < (String.length s1) then 0
	else if (String.compare s1 (String.sub s2 0 (String.length s1))) == 0 then 0
	else 1 + (position s1 (String.sub s2 1 ((String.length s2) - 1)));;

let rec nb_occ_ch s1 s2 = 
	if (String.length s2 ) == 0 then 0
	else if (String.length s2) < (String.length s1) then 0
	else if (String.compare s1 (String.sub s2 0 (String.length s1))) == 0 then
	1 + (nb_occ_ch s1 (String.sub s2 1 ((String.length s2) - 1)));;

let remplace s1 s2 s3 =
	let i=(position s1 s3) in (String.sub s3 0 (i-1))^s2^(String.sub S3 (i-1+(String.length s1)) 
	((String.length s3) - (String.length s1) - (i - 1)));;

let rec somme l1 l2 = 
	match (l1, l2) with
	| (a::q,b::r) -> (a+b)::(somme q r)
	| ([],_) -> []
	| (_,[]) -> [];;

let rec splitbis m n l = match l with
	| [] -> (m,n)
	| ((x,y)::r) -> splitbis (x::m) (y::n) r;;

let split lc = splitbis [] [] lc;;

